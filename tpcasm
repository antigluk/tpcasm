#!/usr/bin/python

import os
import argparse

VERSION = (0, 1)

LEN = 6

JMPS = ['mjmp', 'mjc', 'mjz', 'mjs']
NOOPS = ['mjcmd', 'mnop']
DELAY = {
    'mmov': 3,
    'mmovl': 3,
    'mjmp': 3,  # (mjc) по кол-ву флагов
    'mjz': 3,
    'mjc': 3,
    'madd': 3,
    'msub': 3,
    'mor': 3,
    'mxor': 3,
    'mand': 3,
    'mshl': 3,
    'mshr': 3,
    'mjcmd': 3,
    'mnop': 3,
    'min': 3,
    'mout': 3,
}

CMD = {
    'label': -1,
    'mmov': 0,
    'mmovl': 1,
    'mjmp': 2,  # (mjc) по кол-ву флагов
    'mjz': 2,
    'mjc': 2,
    'madd': 3,
    'msub': 4,
    'mor': 5,
    'mxor': 6,
    'mand': 7,
    'mshl': 8,
    'mshr': 9,
    'mjcmd': 10,
    'mnop': 11,
    'min': 12,
    'mout': 13,
}

OP = {
    'NUL': 0,
    'SP': 1,
    'FLAGS': 2,
    'CMD': 3,
    'R0': 4,
}

for i in range(2**4 - len(OP)):
    OP['R' + str(i+1)] = len(OP)

OP['1'] = len(OP)
OP['0'] = len(OP)
OP['FFFF'] = len(OP)

OP['MEM'] = len(OP)
OP['EXT'] = len(OP)

OP['@SP'] = len(OP)
OP['@IC'] = len(OP)
OP['IENC'] = len(OP)

OP['op1r'] = len(OP)
OP['op1w'] = len(OP)
OP['op2r'] = len(OP)
OP['IC'] = 31


def print_header():
    print("tpcasm %d.%d" % VERSION)
    print('-------------------')


def parse_instruction(instr):
    instr = instr.split(';')[0]  # comments
    # print(instr.strip())

    if not instr:
        return None, None, None, None

    # print(list(filter(None, instr.split(':'))))
    if len(list(filter(None, instr.split(':')))) >= 2:  # label
        cmd = 'label'
        return cmd, instr.split(':')[0], None, None

    cmd = instr.split()[0]
    args = ' '.join(instr.split()[1:]).split(',')
    op1 = args[0]

    op2 = ''
    if len(args) >= 2:
        op2 = args[1]

    add = []

    if len(args) >= 3:
        add = [s.strip() for s in args[2:]]

    return cmd, op1.strip(), op2.strip(), add


def parseop(op):
    ext = None
    try:
        op1 = OP[op]
    except KeyError:
        if op[0] == "#":
            op1 = OP['EXT']
            ext = int(op[1:], 0)
        if op[0] == "@":
            op1 = OP['MEM']
            ext = int(op[1:], 0)
    return op1, ext


def preprocess(cmd):
    if not hasattr(preprocess, 'start'):
        preprocess.start = 0

    if not hasattr(preprocess, 'labels'):
        preprocess.labels = {}

    if cmd[0].startswith("#offset"):
        preprocess.start = int(cmd[1], 0)
        # print ("OFFSET", preprocess.start)
        return cmd

    if cmd[0] == "label":
        preprocess.labels[cmd[1]] = preprocess.start
        return cmd

    if not cmd[0]:
        return cmd

    if cmd[0] == "label":
        preprocess.labels[cmd[1]] = preprocess.start

    preprocess.start += 1
    return cmd


def translate_command(cmd):
    if not hasattr(translate_command, 'start'):
        translate_command.start = 0

    if cmd[0] == "label":
        # return cmd
        # nop after label every time
        cmd = list(cmd)
        cmd[0] = 'mnop'

    if not cmd[0]:
        return None

    if cmd[0].startswith('#offset'):
        return cmd

    beta1 = '1' if cmd[0] in JMPS else '0'

    b2cmd = bin(CMD[cmd[0]])[2:].zfill(4)

    if cmd[0] in NOOPS:
        b2op1, b2ext1 = 0, None
        b2op2, b2ext2 = 0, None
    elif cmd[0] in JMPS:
        b2op1 = JMPS.index(cmd[0])
        b2ext1 = preprocess.labels[cmd[1]]
        b2op2, b2ext2 = 0, None
    else:
        b2op1, b2ext1 = parseop(cmd[1])
        b2op2, b2ext2 = parseop(cmd[2])

    if b2ext1 and b2ext2:
        print ("ERROR: illegal operands")

    b2ext = 0
    if b2ext1:
        b2ext = b2ext1
    if b2ext2:
        b2ext = b2ext2

    b2op1 = bin(b2op1)[2:].zfill(5)
    b2op2 = bin(b2op2)[2:].zfill(5)
    b2ext = bin(b2ext)[2:].zfill(16)

    beta2 = '00%s%s%s%s' % (b2ext, b2op2, b2op1, b2cmd)

    beta3 = bin(DELAY[cmd[0]])[2:].zfill(8)
    beta4 = str(int('0b%s%s%s' % (beta1, beta2, beta3), 2) % 2)
    num = "0b%s%s%s%s%s" % ("1"*6, beta4, beta3, beta2, beta1, )  # last 111111 is reserv

    translate_command.start += 1
    return int(num, 2)


def checksum(data):
    cs = 0
    for m in range(len(data)//2):
        cs += int(data[m*2:m*2+2], 16)

    r = int(hex(cs)[2:][-2:], 16)
    r = (0x100 - r) & 0xFF  # two's complement
    return hex(r)[2:][-2:].zfill(2)


def intel_hex(cmd):
    if not cmd:
        return None
    # return 48bit (6byte)
    if not hasattr(intel_hex, 'start'):
        intel_hex.start = 0

    if type(cmd) is tuple and cmd[0] == 'label':
        return None

    if type(cmd) is tuple and cmd[0].startswith('#offset'):
        new_offset = int(cmd[1], 0) * LEN
        # print (intel_hex.start, new_offset)
        if intel_hex.start > new_offset:
            print ("WARNING: offset backwards from %X to %X: %s" % (intel_hex.start, new_offset, repr(cmd)))
        intel_hex.start = new_offset
        return None

    count = hex(LEN)[2:].zfill(2)
    addr = hex(intel_hex.start)[2:].zfill(4)
    data = hex(cmd)[2:].zfill(12)
    load = count + addr + '00' + data
    cs = checksum(load)

    intel_hex.start += LEN
    return ":%s%s" % (load, cs)


def gen_end():
    addr = hex(intel_hex.start)[2:].zfill(4)
    intel_hex.start += LEN
    load = "%s01" % addr
    cs = checksum(load)
    return ":00%s%s" % (load, cs)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('file', metavar="FILE", type=str, help='source file name')
    parser.add_argument('output', metavar="OUTPUT", type=str, help='output file name')
    parser.add_argument('-q', '--quiet', action="store_true", help="quiet")
    parser.add_argument('--target', type=str, choices=["micro", "firmware"], default="micro",
                        help="micro - microasm; firmware - device program")

    args = parser.parse_args()

    if not args.quiet: print_header()

    build_dir_name = os.path.join(os.path.dirname(args.file), 'build')

    if not os.path.exists(build_dir_name):
        os.mkdir(build_dir_name)

    commands = [parse_instruction(line) for line in filter(lambda x: x.strip(), open(args.file).readlines())]
    preprocessed = [preprocess(cmd) for cmd in commands]
    # print (preprocessed)
    instructions = [translate_command(cmd) for cmd in preprocessed]
    with open(args.output, "w") as output:
        print('\n'.join(filter(None, [intel_hex(instruction) for instruction in instructions])), file=output)
        print(gen_end(), file=output)


if __name__ == '__main__':
    main()
